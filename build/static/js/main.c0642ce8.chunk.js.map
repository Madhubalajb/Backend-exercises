{"version":3,"sources":["services/phonebook.js","components/Persons.js","components/PersonForm.js","components/Filter.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["url","phonebook","axios","get","then","response","data","person","post","person_id","delete","concat","put","Persons","props","react_default","a","createElement","func","PersonForm","onSubmit","add","onChange","required","number","type","Filter","filters","Notification","msg","App","_useState","useState","_useState2","Object","slicedToArray","persons","setPersons","_useState3","_useState4","newPerson","setNewPerson","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","filter","setFilter","_useState9","_useState10","mesaage","setMessage","useEffect","personServices","filteredItems","contact","name","toLowerCase","indexOf","components_Notification","components_Filter","event","target","value","components_PersonForm","preventDefault","some","per","window","confirm","update","find","p","updateObject","objectSpread","id","updated","map","pp","setTimeout","length","returnedPersons","components_Persons","key","onClick","deleted","catch","error","console","log","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0642ce8.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst url = '/api/persons'\r\n\r\nconst getData = () => {\r\n    const request = axios.get(url);\r\n    return request.then(response => response.data);\r\n}\r\n\r\nconst addData = (person) => {\r\n    const request = axios.post(url, person);\r\n    return request.then(response => response.data);\r\n}\r\n\r\nconst deleteData = (person_id) => {\r\n    const request = axios.delete(`${url}/${person_id}`);\r\n    return request.then(response => response.data);\r\n}\r\n\r\nconst updateData = (person_id, person) => {\r\n    const request = axios.put(`${url}/${person_id}`, person);\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getData, addData, deleteData, updateData }","import React from 'react';\r\n\r\nconst Persons = (props) => {\r\n    return (\r\n        <div>{props.func}</div>\r\n    )\r\n}\r\n\r\nexport default Persons;","import React from 'react';\r\n\r\nconst PersonForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.add}>\r\n            <div>name: <input onChange={props.person} required/> </div>\r\n            <div>number: <input onChange={props.number} required/></div>\r\n            <div>\r\n            <button type='submit'>add</button>\r\n            </div>\r\n      </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm;","import React from 'react';\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <div>filter shown with <input onChange={props.filters} /></div>\r\n    )\r\n}\r\n\r\nexport default Filter;","import React from 'react';\r\n\r\nconst Notification = (props) => {\r\n    if(props.msg === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <p><b>{props.msg}</b></p>  \r\n    )\r\n}\r\n\r\nexport default Notification;","import React, {useState, useEffect} from 'react';\nimport personServices from './services/phonebook';\nimport Persons from './components/Persons';\nimport PersonForm from './components/PersonForm';\nimport Filter from './components/Filter';\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newPerson, setNewPerson] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState(''); \n  const [mesaage, setMessage] = useState('')\n\n  useEffect(() => {\n     personServices.getData().then(persons => {setPersons(persons)})\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault();\n    const check = persons.some(per => per.name === newPerson)\n    if (!check) {\n      const person = {\n        name: newPerson,\n        number: newNumber,\n        id: persons.length + 1\n      }\n      personServices.addData(person).then(returnedPersons => {\n        setPersons(persons.concat(returnedPersons))\n        setMessage(`Added ${newPerson}`)\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n        setNewPerson('')\n        setNewNumber('')\n      })\n    }\n    else {\n      window.confirm(`${newPerson} is already added to phonebook, replace the old number with the new one?`)\n      const update = persons.find(p => p.name === newPerson)\n      const updateObject = { ...update, number: newNumber}\n      personServices.updateData(updateObject.id, updateObject).then(updated => {\n        setPersons(persons.map(pp => pp.id !== updateObject.id ? pp : updated))\n        setMessage(`Updated ${updateObject.name}`)\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n      })\n    }\n  }\n  const removePerson = (person) => {\n    window.confirm(`Delete ${person.name} ?`)\n    personServices.deleteData(person.id)\n    .then(deleted => {\n      setPersons(persons.filter(per => per.id !== person.id))\n      setMessage(`Deleted ${person.name}`)\n      setTimeout(() => {\n        setMessage(null)\n      }, 5000)\n    })\n    .catch(error => {\n      console.log(\"fail\")\n    })\n  }\n  const handleNewPerson = (event) => setNewPerson(event.target.value)\n  const handleNewNumber = (event) => setNewNumber(event.target.value)\n  const handleFilter = (event) => setFilter(event.target.value)\n  let filteredItems = persons.filter(contact => contact.name.toLowerCase().indexOf(filter.toLowerCase()) !== -1)\n  const phoneBook = () => filteredItems.map(per => \n      <p key={per.id}>\n        {per.name}: {per.number} <button onClick={() => {removePerson(per)}}>Delete</button>\n      </p>);\n\n  return (\n    <div>\n      <Notification msg = {mesaage} />\n      <h2>Phonebook</h2>\n      <Filter filters = {handleFilter} />\n      <h2>add a new</h2>\n      <PersonForm add = {addPerson} person = {handleNewPerson} number = {handleNewNumber} />\n      <h2>Numbers</h2>\n      <Persons func = {phoneBook()} />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}